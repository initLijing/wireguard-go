// Code generated by 'go generate'; DO NOT EDIT.

package wintun

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modwintun = windows.NewLazySystemDLL("wintun.dll")

	procWintunSetLogger              = modwintun.NewProc("WintunSetLogger")
	procWintunFreeAdapter            = modwintun.NewProc("WintunFreeAdapter")
	procWintunGetAdapter             = modwintun.NewProc("WintunGetAdapter")
	procWintunCreateAdapter          = modwintun.NewProc("WintunCreateAdapter")
	procWintunDeleteAdapter          = modwintun.NewProc("WintunDeleteAdapter")
	procWintunEnumAdapters           = modwintun.NewProc("WintunEnumAdapters")
	procWintunGetAdapterName         = modwintun.NewProc("WintunGetAdapterName")
	procWintunSetAdapterName         = modwintun.NewProc("WintunSetAdapterName")
	procWintunGetVersion             = modwintun.NewProc("WintunGetVersion")
	procWintunGetAdapterDeviceObject = modwintun.NewProc("WintunGetAdapterDeviceObject")
	procWintunGetAdapterGUID         = modwintun.NewProc("WintunGetAdapterGUID")
	procWintunGetAdapterLUID         = modwintun.NewProc("WintunGetAdapterLUID")
)

func wintunSetLogger(logger uintptr) {
	syscall.Syscall(procWintunSetLogger.Addr(), 1, uintptr(logger), 0, 0)
	return
}

func wintunFreeAdapter(adapter Adapter) {
	syscall.Syscall(procWintunFreeAdapter.Addr(), 1, uintptr(adapter), 0, 0)
	return
}

func wintunGetAdapter(pool *uint16, name *uint16, adapter *Adapter) (ret error) {
	r0, _, _ := syscall.Syscall(procWintunGetAdapter.Addr(), 3, uintptr(unsafe.Pointer(pool)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(adapter)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunCreateAdapter(pool *uint16, name *uint16, requestedGUID *windows.GUID, adapter *Adapter, rebootRequired *bool) (ret error) {
	var _p0 uint32
	if *rebootRequired {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r0, _, _ := syscall.Syscall6(procWintunCreateAdapter.Addr(), 5, uintptr(unsafe.Pointer(pool)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(requestedGUID)), uintptr(unsafe.Pointer(adapter)), uintptr(unsafe.Pointer(&_p0)), 0)
	*rebootRequired = _p0 != 0
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunDeleteAdapter(adapter Adapter, rebootRequired *bool) (ret error) {
	var _p0 uint32
	if *rebootRequired {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r0, _, _ := syscall.Syscall(procWintunDeleteAdapter.Addr(), 2, uintptr(adapter), uintptr(unsafe.Pointer(&_p0)), 0)
	*rebootRequired = _p0 != 0
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunEnumAdapters(pool *uint16, cb uintptr, param uintptr) (ret error) {
	r0, _, _ := syscall.Syscall(procWintunEnumAdapters.Addr(), 3, uintptr(unsafe.Pointer(pool)), uintptr(cb), uintptr(param))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunGetAdapterName(adapter Adapter, name *uint16) (ret error) {
	r0, _, _ := syscall.Syscall(procWintunGetAdapterName.Addr(), 2, uintptr(adapter), uintptr(unsafe.Pointer(name)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunSetAdapterName(adapter Adapter, name *uint16) (ret error) {
	r0, _, _ := syscall.Syscall(procWintunSetAdapterName.Addr(), 2, uintptr(adapter), uintptr(unsafe.Pointer(name)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunGetVersion(driverVersionMaj *uint32, driverVersionMin *uint32, ndisVersionMaj *uint32, ndisVersionMin *uint32) (ret error) {
	r0, _, _ := syscall.Syscall6(procWintunGetVersion.Addr(), 4, uintptr(unsafe.Pointer(driverVersionMaj)), uintptr(unsafe.Pointer(driverVersionMin)), uintptr(unsafe.Pointer(ndisVersionMaj)), uintptr(unsafe.Pointer(ndisVersionMin)), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunGetAdapterDeviceObject(adapter Adapter, handle *windows.Handle) (ret error) {
	r0, _, _ := syscall.Syscall(procWintunGetAdapterDeviceObject.Addr(), 2, uintptr(adapter), uintptr(unsafe.Pointer(handle)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func wintunGetAdapterGUID(adapter Adapter, guid *windows.GUID) {
	syscall.Syscall(procWintunGetAdapterGUID.Addr(), 2, uintptr(adapter), uintptr(unsafe.Pointer(guid)), 0)
	return
}

func wintunGetAdapterLUID(adapter Adapter, luid *uint64) {
	syscall.Syscall(procWintunGetAdapterLUID.Addr(), 2, uintptr(adapter), uintptr(unsafe.Pointer(luid)), 0)
	return
}
